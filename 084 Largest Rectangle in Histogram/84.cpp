/*

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.

For example,
Given height = [2,1,5,6,2,3],
return 10.

*/

#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

// for each height, we need to find out the first bar which is lower than it on both sides
// whenever we find a bar lower than its previous, we calculate the area generated by the previous one
// use a stack to store the indices of non-decreasing heights
// so that after we pop a height, the top one is the one lower (or equal) on its left
// we don't need seperate case for equal ones, because the maxArea is gonna be updated next round
class Solution {
public:
    int largestRectangleArea(vector<int>& height) {
        // push a sentinel make the code more concise, -1 is less than any height, so all of them will be calculated
        height.push_back(-1);
        stack<int> indices;  // store indexes of non-decreasing heights
        int n = height.size(), maxArea = 0, h, area;
        for (int i = 0; i < n;)
            if (indices.empty() || height[indices.top()] <= height[i])
                indices.push(i++);
            else
            {
                // height[i] < s_top
                // s_top can't extend to right, so calculate the area with s_top as the lowest bar
                h = height[indices.top()];
                indices.pop();
                //while (!s.empty() && height[s.top()] == h)
                //s.pop();
                // right boundary is i, because height[i] is the first smaller
                // left boundary is s.top() + 1 or 0
                area = h * (indices.empty() ? i : i - indices.top() - 1);
                maxArea = max(maxArea, area);
            }

        return maxArea;
    }
};